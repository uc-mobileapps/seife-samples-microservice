package com.uc_mobileapps.examples.cloud.ui.forms;

import com.uc_mobileapps.examples.entities.Trip;
import com.uc_mobileapps.examples.restclient.TripClient;
import com.vaadin.flow.component.ClickEvent;
import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.datetimepicker.DateTimePicker;
import com.vaadin.flow.component.formlayout.FormLayout;
import com.vaadin.flow.component.textfield.TextField;
import com.vaadin.flow.data.binder.Binder;
import com.vaadin.flow.data.binder.Binder.Binding;
import com.vaadin.flow.data.binder.Binder.BindingBuilder;
import com.vaadin.flow.spring.annotation.SpringComponent;
import com.weebmeister.seife.anno.SeifeBinding;
import com.weebmeister.seife.anno.SeifeForm;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;

import javax.annotation.PostConstruct;
import java.util.ArrayList;
import java.util.List;
import java.util.function.BiConsumer;

import static org.springframework.beans.factory.config.ConfigurableBeanFactory.SCOPE_PROTOTYPE;

/**
 * Simple customer editor, the three fields are the only things to declare.
 * The generated code is right in the form class, can be read and understood easily and does not rely on reflection.
 * @SeifeBinding takes e.g. mandatory defined at the business object into account everywhere it is used in a form.
 */
@SpringComponent
@Scope(SCOPE_PROTOTYPE)
@SeifeForm(forClass = Trip.class, generatorOptions = {"form.formClass"})
public class TripForm extends FormLayout {

	/**
	 * The recommended way is to name the fields just as in e.g. {@link Trip}, fields are then bound implicitly.
	 */
	@SeifeBinding
	private TextField source;

	/**
	 * However if necessary it can be explicitly bound via the name.
	 */
	@SeifeBinding
	private TextField destination;

	/**
	 * You can navigate fields with the dot-notation, even if they may contain null and are not mandatory.
	 */
	@SeifeBinding
	private DateTimePicker tripStart;


	private Button save = new Button("Save");

	/**
	 * The vaadin bean binder.
	 */
	private Binder<Trip> binder;

	/**
	 * The Spring customer repository. In real scenarios it is recommended to use a service instead that has the
	 * repository autowired.
	 */
	private TripClient tripClient;

	@Autowired
    public TripForm(TripClient tripClient) {
		this.tripClient = tripClient;
	}

	public void setEntity(Trip customer) {
		binder.setBean(customer);
	}

	private Binder<Trip> getBinder() {
		if (binder == null) {
			binder = new Binder<>(Trip.class);
		}
		return binder;
	}


	@PostConstruct
	public void setup() {

		setupFields();

		add(source, destination, tripStart);

		// address / visitedCustomer

		// localization can also be achieved in a generic way by customizing the templates
		source.setLabel("Source...");
		destination.setTitle("Dest title");
			/*	title.setLabel("Title");
    	add(title);
    	firstName.setLabel("Firstname");
    	add(firstName);
    	name.setLabel("Name");
    	add(name);
    	password.setLabel("Password");
    	add(password);
    	street.setLabel("Street");
    	add(street);
		birthday.setLabel("Birthday");
		add(birthday);
		premium.setLabel("Premium user");
		add(premium);
		active.setLabel("Is active");
		add(active);
*/
		createBindings();
		// any bindings can be adjusted before binding
    	/*builderBirthday.withValidator((birthday, b) ->
				(birthday == null || LocalDate.now(ZoneId.of("UTC")).minusYears(18).isAfter(birthday))
						? ValidationResult.ok() : ValidationResult.error("Customer must be 18 or older"));
		*/
		bindAutogenerated();

		save.addClickListener(this::save);
		add(save);

		binder.setBean(new Trip());
	}

	private List<BiConsumer<Trip, Boolean>> saveListeners = new ArrayList<>();

	public void addSaveListener(BiConsumer<Trip, Boolean> saveListener) {
		saveListeners.add(saveListener);
	}

	protected void onSave(Trip trip, boolean isNew) {
		saveListeners.forEach(listener -> listener.accept(trip, isNew));
	}

	private void save(ClickEvent<Button> buttonClickEvent) {
		if (getBinder().validate().isOk()) {
			Trip trip = binder.getBean();
			boolean isNew = trip.getId() == null;
			long tripId = tripClient.create(trip);
			trip.setId(tripId);
			onSave(trip, isNew);
		}
	}

    // @seife automatically generated:


	@SuppressWarnings("unused")
	private Binding<Trip, String> bindingSource;
	@SuppressWarnings("unused")
	private Binding<Trip, String> bindingDestination;
	@SuppressWarnings("unused")
	private Binding<Trip, java.time.LocalDateTime> bindingTripStart;
 
	private BindingBuilder<Trip, String> builderSource;
	private BindingBuilder<Trip, String> builderDestination;
	private BindingBuilder<Trip, java.time.LocalDateTime> builderTripStart;
 
	/**
	 * Call this to setup initial bindings of all annotated attributes. You can customize the bindings before calling {@link #bindAutogenerated()}
	 */
	protected final void createBindings() {
		Binder<Trip> binder = getBinder();
		builderSource = binder.forField(source);
		builderDestination = binder.forField(destination);
		builderTripStart = binder.forField(tripStart);
 	}

	/**
	 * Call this e.g. from the bind method.
	 */
	protected final void bindAutogenerated() {
		bindingSource = builderSource.bind("source");
		bindingDestination = builderDestination.bind("destination");
		bindingTripStart = builderTripStart.bind("tripStart");
 	}

	/**
	 * Call this e.g. from a @PostConstruct annotated method.
	 */
	protected final void setupFields() {
		source = new TextField();
		source.setId("source");
		destination = new TextField();
		destination.setId("destination");
		tripStart = new DateTimePicker();
		tripStart.setId("tripStart");
 	}

	// @seife auto-code end
}
